import { PrismaService } from '../../../db/prisma.service';
import { CreateEventDto } from '../dto/create-event.dto';
import { QueryEventDto } from '../dto/query-event.dto';
import { BuyEventTicketDto } from '../dto/buy-ticket.dto';
import { UpdateEventDto } from '../dto/update-event.dto';
export declare class EventRepository {
    private readonly prisma;
    constructor(prisma: PrismaService);
    create(createEventDto: CreateEventDto): Promise<{
        id: number;
        name: string;
        slug: string;
        photo: string;
        description: string;
        start_date: Date;
        end_date: Date;
        user_id: number;
        category_id: number;
        capacity: number;
        quantity_left: number;
        active: boolean;
        price: number;
        location: string;
        created_at: Date;
        updated_at: Date;
    }>;
    findAll(query: QueryEventDto): Promise<({
        category: {
            id: number;
            name: string;
            photo: string;
        };
    } & {
        id: number;
        name: string;
        slug: string;
        photo: string;
        description: string;
        start_date: Date;
        end_date: Date;
        user_id: number;
        category_id: number;
        capacity: number;
        quantity_left: number;
        active: boolean;
        price: number;
        location: string;
        created_at: Date;
        updated_at: Date;
    })[]>;
    findById(id: number): Promise<{
        id: number;
        name: string;
        slug: string;
        photo: string;
        description: string;
        start_date: Date;
        end_date: Date;
        user_id: number;
        category_id: number;
        capacity: number;
        quantity_left: number;
        active: boolean;
        price: number;
        location: string;
        created_at: Date;
        updated_at: Date;
    }>;
    findBySlug(slug: string): Promise<{
        id: number;
        name: string;
        slug: string;
        photo: string;
        description: string;
        start_date: Date;
        end_date: Date;
        user_id: number;
        category_id: number;
        capacity: number;
        quantity_left: number;
        active: boolean;
        price: number;
        location: string;
        created_at: Date;
        updated_at: Date;
    }>;
    buyTicket(buyEventTicket: BuyEventTicketDto): Promise<{
        tickets: {
            id: number;
            event_id: number;
            user_id: number;
            price: number;
            payment_method_id: number;
            created_at: Date;
            updated_at: Date;
        }[];
    } & {
        id: number;
        name: string;
        slug: string;
        photo: string;
        description: string;
        start_date: Date;
        end_date: Date;
        user_id: number;
        category_id: number;
        capacity: number;
        quantity_left: number;
        active: boolean;
        price: number;
        location: string;
        created_at: Date;
        updated_at: Date;
    }>;
    update(id: number, updateEventDto: UpdateEventDto): Promise<{
        id: number;
        name: string;
        slug: string;
        photo: string;
        description: string;
        start_date: Date;
        end_date: Date;
        user_id: number;
        category_id: number;
        capacity: number;
        quantity_left: number;
        active: boolean;
        price: number;
        location: string;
        created_at: Date;
        updated_at: Date;
    }>;
    delete(id: number): Promise<{
        id: number;
        name: string;
        slug: string;
        photo: string;
        description: string;
        start_date: Date;
        end_date: Date;
        user_id: number;
        category_id: number;
        capacity: number;
        quantity_left: number;
        active: boolean;
        price: number;
        location: string;
        created_at: Date;
        updated_at: Date;
    }>;
}
